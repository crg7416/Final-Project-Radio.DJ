<!DOCTYPE html>
<html lang="en">
<head>
  <title>{{title}}</title>
  <link rel="stylesheet" type="text/css" href="../assets/style.css">
  <style>
    /* This is separate from the css file because I strictly want only this page covered */
    html { 
	  background: url(../assets/microphone.png) no-repeat center center fixed; 
	  -webkit-background-size: cover;
	  -moz-background-size: cover;
	  -o-background-size: cover;
	  background-size: cover;
	}
  </style>
  <script type="text/javascript" src="https://w.soundcloud.com/player/api.js"></script> <!--Exposes Soundcloud Widget-->
  <script src="/socket.io/socket.io.js"></script>
  <script>
  "use strict";
    
  let socket;
  let widget;
  let tracklist = [];
  let currentSong;
  let options = [];
  let playing = true;
    
  const init = () => {

    socket = io.connect();
    //Create widget
    widget = SC.Widget(document.getElementById('soundcloudWidget'));
    
    //widget.bind allows for attaching listeners to the widget based on events
    widget.bind(SC.Widget.Events.READY, () => {
      //This track loads by default, so I have to add it to the tracklist array
      if({{hosting}}){
        tracklist.push('https://soundcloud.com/majorlazer/major-lazer-dj-snake-lean-on-feat-mo');
        console.log('Ready...');
      }
    });
    
    //Calls trackFinished when the current track that's playing ends
    widget.bind(SC.Widget.Events.FINISH, trackFinished);
    
    var trackQueue = document.getElementById('trackQueue'); 

    //Permanent list of options for the widget
    options.show_artwork=true;
    options.liking=true;
    options.sharing=false;
    options.auto_play=true;
    options.single_active=true; //Change this to false to play multiple SC links simultaneously
    
    if({{hosting}}){ //Don't call this if not the host
      const queue = document.getElementById('queue');
      queue.addEventListener('click', updateTracklist);
      queue.addEventListener('mouseover', queueFlip);
      queue.addEventListener('mouseout', queueLeave);
    }
    
    //Add functionality to buttons
    const play = document.getElementById('play');
    play.addEventListener('click', playSong);
    const pause = document.getElementById('pause');
    pause.addEventListener('click', pauseSong);

    socket.on('connect', () => {
      //Call guest functions to join room and get current tracklist, then play track
      if(!{{hosting}}){
        socket.emit('joinRoom', `{{roomName}}`); 
      }
              
        socket.on('getTracklist', getTracklist);
        socket.on('getFirstTrack', getFirstTrack);
    }); 
  };
    
  const updateTracklist = () => { 
    var songURL = document.getElementById('songURL').value;
    var checkURL = scValidate(songURL);
    
    if(checkURL != false && currentSong != songURL){
      console.log(`${songURL} added to queue`);
    
      //Add song to the array and set currentSong equal to the URl to avoid immediate repeat plays
      tracklist.push(songURL);
      currentSong = songURL;
      trackQueue.innerHTML = `${songURL} added to queue!`;
      socket.emit('updateTrack', {roomName: `{{roomName}}`, trackList: tracklist, track: songURL });
    }
    else{
      trackQueue.innerHTML = 'Invalid URL entered!';
    }
  };
    
  const trackFinished = () => {
    //Remove the song that just finished from the array and play the next one
    tracklist.shift();
    widget.load(tracklist[0], options);
    //Update the tracklist server-side, but only if you're hosting
    if({{hosting}}){
      socket.emit('trackEnded', tracklist);
    }
  };
    
  const getTracklist = (data) => {
    //Get the updating tracklist from the server, which gets it from the host of the room
    tracklist.push(data);
    
    //If the guest finishes his queue before the host, fire up the new track as soon as it comes in
    if(tracklist.length == 1){
      widget.load(tracklist[0], options);
    }
    console.dir(tracklist);
  };
    
  const getFirstTrack = (data) => {
      tracklist = data;
      widget.load(tracklist[0], options);
  };
  
  //I couldn't find any soundcloud url validator so this is the best I can really do
  const scValidate = (url) => {
    if(url.includes('https') && url.includes('soundcloud.com')){
      return true;
    }
     return false;
  };
    
  const queueFlip = () => {
    const qFlip = document.getElementById('queueFlip');
    qFlip.style.opacity = 1;
  };
    
  const queueLeave = () => {
    const qFlip = document.getElementById('queueFlip');      
    qFlip.style.opacity = 0;
  };
    
  const playSong = () => {
    if(!playing){
      playing = true;
      widget.play();
    }
  };
    
  const pauseSong = () => {
    if(playing){
      playing = false;
      widget.pause();
    }
  };

  window.onload = init;
  
  //If the page becomes "unloaded" by the host, call this and remove the room from the list of rooms
  window.onbeforeunload = () => {
    if({{hosting}}){
      socket.emit('removeRoom', `{{roomName}}`);
    }
  };
  </script>
</head>
<body>
    <a href="/"><img id="homeButton" src="../assets/logo.png" /></a>
  <div class="roomOptions">
  <p id="welcome">Welcome to {{roomName}}</p>
  <iframe id="soundcloudWidget"
      src="https://w.soundcloud.com/player/?url=https://soundcloud.com/majorlazer/major-lazer-dj-snake-lean-on-feat-mo&show_artwork=true&liking=false&sharing=false&auto_play=true&single_active=false"
      width="710" height="120" frameborder="no"></iframe>
  
  {{#if hosting}}
    <div class="cfQueue">
      <img id="queueFlip" class = "bottom" src="../assets/queueFlip.png" />
      <img id="queue" class = "top" src="../assets/queue.png" />
    </div>
  <input id="songURL" type="text" size=16 name="queueSong" value="Enter Soundcloud URL">
  {{/if}}
  <br>
  <p id='trackQueue'></p>
  <div id='buttons'>
    <img id="play" class = "top" src="../assets/play.png" />
    <img id="pause" class = "top" src="../assets/pause.png" />
  </div>

  </div>
</body>
</html>